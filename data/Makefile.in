
# Copyright 2015 Matt Shannon
# Copyright 2001-2014 Nagoya Institute of Technology, Department of Computer Science
# Copyright 2001-2008 Tokyo Institute of Technology, Interdisciplinary Graduate School of Science and Engineering

# This file is part of hts-demo-en-US-cmudict-aridity.
# See `License` for details of license and warranty.

# awk and perl
AWK = @AWK@
PERL = @PERL@
PYTHON = @PYTHON@

# SPTK commands
X2X     = @X2X@
MGCEP   = @MGCEP@
LPC2LSP = @LPC2LSP@
MERGE   = @MERGE@
VSTAT   = @VSTAT@
SOPR    = @SOPR@
NAN     = @NAN@
MINMAX  = @MINMAX@
PITCH   = @PITCH@
FRAME   = @FRAME@
WINDOW  = @WINDOW@
RAW2WAV = @RAW2WAV@
WAV2RAW = @WAV2RAW@

# MATLAB and STRAIGHT
USESTRAIGHT = @USESTRAIGHT@
MATLAB      = @MATLAB@
STRAIGHT    = @STRAIGHT@

# Festival commands
USEUTT    = @USEUTT@
TEXT2UTT  = @TEXT2UTT@
DUMPFEATS = @DUMPFEATS@

# speech analysis conditions
SAMPFREQ   = @SAMPFREQ@   # Sampling frequency (48kHz)
FRAMELEN   = @FRAMELEN@   # Frame length in point (1200 = 48000 * 0.025)
FRAMESHIFT = @FRAMESHIFT@ # Frame shift in point (240 = 48000 * 0.005)
WINDOWTYPE = @WINDOWTYPE@ # Window type -> 0: Blackman 1: Hamming 2: Hanning
NORMALIZE  = @NORMALIZE@  # Normalization -> 0: none  1: by power  2: by magnitude
FFTLEN     = @FFTLEN@     # FFT length in point
FREQWARP   = @FREQWARP@   # frequency warping factor
GAMMA      = @GAMMA@      # pole/zero weight for mel-generalized cepstral (MGC) analysis
MGCORDER   = @MGCORDER@   # order of MGC analysis
BAPORDER   = @BAPORDER@   # order of BAP analysis
LNGAIN     = @LNGAIN@     # use logarithmic gain rather than linear gain
LOWERF0    = @LOWERF0@    # lower limit for f0 extraction (Hz)
UPPERF0    = @UPPERF0@    # upper limit for f0 extraction (Hz)

# windows for calculating delta features
MGCWIN  = win/mgc.win
LF0WIN  = win/lf0.win
BAPWIN  = win/bap.win
NMGCWIN = @NMGCWIN@
NLF0WIN = @NLF0WIN@
NBAPWIN = @NBAPWIN@

all: corpus-train.lst corpus-test.lst corpus-gen.lst analysis labels

analysis: check-wav features cmp

labels: lab mlf list scp

check-wav:
	# Check wav files are reasonable
	cat corpus-train.lst corpus-test.lst | while read uttId; do \
		if [ ! -f wav/$$uttId.wav ]; then \
			echo "ERROR: file does not exist: wav/$$uttId.wav" 1>&2; \
			exit 1; \
		fi; \
		wavInfo=`$(PYTHON) scripts/print_wav_info.py wav/$$uttId.wav`; \
		if [ ! "`echo "$$wavInfo" | grep -F -x 'num channels = 1'`" ]; then \
			echo "ERROR: wav file should have 1 channel: wav/$$uttId.wav" 1>&2; \
			exit 1; \
		fi; \
		if [ ! "`echo "$$wavInfo" | grep -F -x 'bit depth = 16'`" ]; then \
			echo "ERROR: wav file should be 16-bit: wav/$$uttId.wav" 1>&2; \
			exit 1; \
		fi; \
		if [ ! "`echo "$$wavInfo" | grep -F -x 'sampling frequency = $(SAMPFREQ)'`" ]; then \
			echo "ERROR: wav file should have sampling frequency $(SAMPFREQ): wav/$$uttId.wav" 1>&2; \
			exit 1; \
		fi; \
		if [ ! "`echo "$$wavInfo" | grep -F -x 'compression = NONE'`" ]; then \
			echo "ERROR: wav file should not use compression: wav/$$uttId.wav" 1>&2; \
			exit 1; \
		fi; \
		$(WAV2RAW) -d . wav/$$uttId.wav; \
		min=`$(X2X) +sf $$uttId.raw | $(MINMAX) | $(X2X) +fa | head -n 1`; \
		max=`$(X2X) +sf $$uttId.raw | $(MINMAX) | $(X2X) +fa | tail -n 1`; \
		if [ $$min -le -32768 -o $$max -ge 32767 ]; then \
			echo "ERROR: wav file wav/$$uttId.wav suffers from clipping" 1>&2; \
			exit 1; \
		fi; \
		rm -f $$uttId.raw; \
	done

features:
	# Extracting features from wav audio
	mkdir -p mgc lf0 bap
	SAMPKHZ=`echo $(SAMPFREQ) | $(X2X) +af | $(SOPR) -m 0.001 | $(X2X) +fa`; \
	cat corpus-train.lst corpus-test.lst | while read uttId; do \
		echo "Extracting features for utterance $$uttId"; \
		if [ $(USESTRAIGHT) -eq 0 ]; then \
			$(WAV2RAW) -d . wav/$$uttId.wav; \
			$(X2X) +sf $$uttId.raw | $(PITCH) -H $(UPPERF0) -L $(LOWERF0) -p $(FRAMESHIFT) -s $${SAMPKHZ} -o 2 > lf0/$$uttId.lf0; \
			if [ $(GAMMA) -eq 0 ]; then \
				$(X2X) +sf $$uttId.raw | \
				$(FRAME) -l $(FRAMELEN) -p $(FRAMESHIFT) | \
				$(WINDOW) -l $(FRAMELEN) -L $(FFTLEN) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
				$(MGCEP) -a $(FREQWARP) -m $(MGCORDER) -l $(FFTLEN) -e 1.0E-08 > mgc/$$uttId.mgc; \
			else \
				if [ $(LNGAIN) -eq 1 ]; then \
					GAINOPT="-L"; \
				else \
					GAINOPT=""; \
				fi; \
				$(X2X) +sf $$uttId.raw | \
				$(FRAME) -l $(FRAMELEN) -p $(FRAMESHIFT) | \
				$(WINDOW) -l $(FRAMELEN) -L $(FFTLEN) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
				$(MGCEP) -a $(FREQWARP) -c $(GAMMA) -m $(MGCORDER) -l $(FFTLEN) -e 1.0E-08 -o 4 | \
				$(LPC2LSP) -m $(MGCORDER) -s $${SAMPKHZ} $${GAINOPT} -n $(FFTLEN) -p 8 -d 1.0E-08 > mgc/$$uttId.mgc; \
			fi; \
			if [ -n "`$(NAN) lf0/$$uttId.lf0`" ]; then \
				echo "ERROR: feature extraction failed for utterance $$uttId" 1>&2; \
				exit 1; \
			fi; \
			if [ -n "`$(NAN) mgc/$$uttId.mgc`" ]; then \
				echo "ERROR: feature extraction failed for utterance $$uttId" 1>&2; \
				exit 1; \
			fi; \
			rm -f $$uttId.raw; \
		else \
			FRAMESHIFTMS=`echo $(FRAMESHIFT) | $(X2X) +af | $(SOPR) -m 1000 -d $(SAMPFREQ) | $(X2X) +fa`; \
			echo "path(path,'$(STRAIGHT)');"                    >  $$uttId.m; \
			echo "prm.F0frameUpdateInterval=$${FRAMESHIFTMS};"  >> $$uttId.m; \
			echo "prm.F0searchUpperBound=$(UPPERF0);"           >> $$uttId.m; \
			echo "prm.F0searchLowerBound=$(LOWERF0);"           >> $$uttId.m; \
			echo "prm.spectralUpdateInterval=$${FRAMESHIFTMS};" >> $$uttId.m; \
			echo "[x, fs] = wavread('wav/$$uttId.wav');"        >> $$uttId.m; \
			echo "[f0,ap] = exstraightsource(x,fs,prm);"        >> $$uttId.m; \
			echo "[sp] = exstraightspec(x,f0,fs,prm);"          >> $$uttId.m; \
			echo "ap = ap';"                                    >> $$uttId.m; \
			echo "sp = sp';"                                    >> $$uttId.m; \
			echo "save '$$uttId.f0' f0 -ascii;"                 >> $$uttId.m; \
			echo "save '$$uttId.ap' ap -ascii;"                 >> $$uttId.m; \
			echo "save '$$uttId.sp' sp -ascii;"                 >> $$uttId.m; \
			echo "quit;"                                        >> $$uttId.m; \
			$(MATLAB) < $$uttId.m; \
			if [ -f $$uttId.f0 -a -f $$uttId.ap -a -f $$uttId.sp ]; then \
				:; \
			else \
				echo "ERROR: feature extraction failed for utterance $$uttId" 1>&2; \
				exit 1; \
			fi; \
			$(X2X) +af $$uttId.f0 | $(SOPR) -magic 0.0 -LN -MAGIC -1.0E+10 > lf0/$$uttId.lf0; \
			if [ $(GAMMA) -eq 0 ]; then \
				$(X2X) +af $$uttId.sp | \
				$(MGCEP) -a $(FREQWARP) -m $(MGCORDER) -l 2048 -e 1.0E-08 -j 0 -f 0.0 -q 3 > mgc/$$uttId.mgc; \
			else \
				if [ $(LNGAIN) -eq 1 ]; then \
					GAINOPT="-L"; \
				fi; \
				$(X2X) +af $$uttId.sp | \
				$(MGCEP) -a $(FREQWARP) -c $(GAMMA) -m $(MGCORDER) -l 2048 -e 1.0E-08 -j 0 -f 0.0 -q 3 -o 4 | \
				$(LPC2LSP) -m $(MGCORDER) -s $${SAMPKHZ} $${GAINOPT} -n 2048 -p 8 -d 1.0E-08 > mgc/$$uttId.mgc; \
			fi; \
			$(X2X) +af $$uttId.ap | \
			$(MGCEP) -a $(FREQWARP) -m $(BAPORDER) -l 2048 -e 1.0E-08 -j 0 -f 0.0 -q 1 > bap/$$uttId.bap; \
			if [ -n "`$(NAN) lf0/$$uttId.lf0`" ]; then \
				echo "ERROR: feature extraction failed for utterance $$uttId" 1>&2; \
				exit 1; \
			fi; \
			if [ -n "`$(NAN) mgc/$$uttId.mgc`" ]; then \
				echo "ERROR: feature extraction failed for utterance $$uttId" 1>&2; \
				exit 1; \
			fi; \
			if [ -n "`$(NAN) bap/$$uttId.bap`" ]; then \
				echo "ERROR: feature extraction failed for utterance $$uttId" 1>&2; \
				exit 1; \
			fi; \
			rm -f $$uttId.m $$uttId.raw $$uttId.f0 $$uttId.ap $$uttId.sp; \
		fi; \
	done

cmp:
	# Composing training data files from extracted features
	mkdir -p cmp
	cat corpus-train.lst corpus-test.lst | while read uttId; do \
		echo "Composing training data for $${uttId}"; \
		if [ $(USESTRAIGHT) -eq 0 ]; then \
			MGCDIM=`expr $(MGCORDER) + 1`; \
			LF0DIM=1; \
			MGCWINDIM=`expr $(NMGCWIN) \* $${MGCDIM}`; \
			LF0WINDIM=`expr $(NLF0WIN) \* $${LF0DIM}`; \
			BYTEPERFRAME=`expr 4 \* \( $${MGCWINDIM} + $${LF0WINDIM} \)`; \
			if [ -s mgc/$${uttId}.mgc -a -s lf0/$${uttId}.lf0 ]; then \
				MGCWINS=""; \
				i=1; \
				while [ $${i} -le $(NMGCWIN) ]; do \
					eval MGCWINS=\"$${MGCWINS} $(MGCWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${MGCDIM} mgc/$${uttId}.mgc $${MGCWINS} > tmp.mgc; \
				LF0WINS=""; \
				i=1; \
				while [ $${i} -le $(NLF0WIN) ]; do \
					eval LF0WINS=\"$${LF0WINS} $(LF0WIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${LF0DIM} lf0/$${uttId}.lf0 $${LF0WINS} > tmp.lf0; \
				$(MERGE) +f -s 0 -l $${LF0WINDIM} -L $${MGCWINDIM} tmp.mgc < tmp.lf0                 > tmp.cmp; \
				$(PERL) scripts/addhtkheader.pl $(SAMPFREQ) $(FRAMESHIFT) $${BYTEPERFRAME} 9 tmp.cmp > cmp/$${uttId}.cmp; \
				rm -f tmp.mgc tmp.lf0 tmp.cmp; \
			fi; \
		else \
			MGCDIM=`expr $(MGCORDER) + 1`; \
			LF0DIM=1; \
			BAPDIM=`expr $(BAPORDER) + 1`; \
			MGCWINDIM=`expr $(NMGCWIN) \* $${MGCDIM}`; \
			LF0WINDIM=`expr $(NLF0WIN) \* $${LF0DIM}`; \
			BAPWINDIM=`expr $(NBAPWIN) \* $${BAPDIM}`; \
			MGCLF0WINDIM=`expr $${MGCWINDIM} + $${LF0WINDIM}`; \
			BYTEPERFRAME=`expr 4 \* \( $${MGCWINDIM} + $${LF0WINDIM} + $${BAPWINDIM} \)`; \
			if [ -s mgc/$${uttId}.mgc -a -s lf0/$${uttId}.lf0 -a -s bap/$${uttId}.bap ]; then \
				MGCWINS=""; \
				i=1; \
				while [ $${i} -le $(NMGCWIN) ]; do \
					eval MGCWINS=\"$${MGCWINS} $(MGCWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${MGCDIM} mgc/$${uttId}.mgc $${MGCWINS} > tmp.mgc; \
				LF0WINS=""; \
				i=1; \
				while [ $${i} -le $(NLF0WIN) ]; do \
					eval LF0WINS=\"$${LF0WINS} $(LF0WIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${LF0DIM} lf0/$${uttId}.lf0 $${LF0WINS} > tmp.lf0; \
				BAPWINS=""; \
				i=1; \
				while [ $${i} -le $(NBAPWIN) ]; do \
					eval BAPWINS=\"$${BAPWINS} $(BAPWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${BAPDIM} bap/$${uttId}.bap $${BAPWINS} > tmp.bap; \
				$(MERGE) +f -s 0 -l $${LF0WINDIM} -L $${MGCWINDIM}    tmp.mgc     < tmp.lf0          > tmp.mgc+lf0; \
				$(MERGE) +f -s 0 -l $${BAPWINDIM} -L $${MGCLF0WINDIM} tmp.mgc+lf0 < tmp.bap          > tmp.cmp; \
				$(PERL) scripts/addhtkheader.pl $(SAMPFREQ) $(FRAMESHIFT) $${BYTEPERFRAME} 9 tmp.cmp > cmp/$${uttId}.cmp; \
				rm -f tmp.mgc tmp.lf0 tmp.bap tmp.mgc+lf0 tmp.cmp; \
			fi; \
		fi; \
	done

lab:
	# Extracting monophone and fullcontext labels
	mkdir -p labels/mono
	mkdir -p labels/full
	if [ $(USEUTT) -eq 1 ]; then \
		cat corpus-train.lst corpus-test.lst corpus-gen.lst | while read uttId; do \
			if [ -s utts/$${uttId}.utt ]; then \
				echo "Extracting labels from utts/$${uttId}.utt"; \
				$(DUMPFEATS) -eval scripts/extra_feats.scm -relation Segment -feats scripts/label.feats -output tmp.feats utts/$${uttId}.utt; \
			fi; \
			if [ -s tmp.feats ]; then \
				$(AWK) -f scripts/label-full.awk tmp.feats > labels/full/$${uttId}.lab; \
				$(AWK) -f scripts/label-mono.awk tmp.feats > labels/mono/$${uttId}.lab; \
				rm -f tmp.feats; \
			fi; \
		done; \
	else \
		mkdir -p utts; \
		cat corpus-train.lst corpus-test.lst corpus-gen.lst | while read uttId; do \
			if [ -s txt/$${uttId}.txt ]; then \
				echo "Extracting labels from txt/$${uttId}.txt"; \
				$(PERL) scripts/normtext.pl txt/$${uttId}.txt > tmp.txt; \
				$(TEXT2UTT) tmp.txt > utts/$${uttId}.utt; \
				$(DUMPFEATS) -eval scripts/extra_feats.scm -relation Segment -feats scripts/label.feats -output tmp.feats utts/$${uttId}.utt; \
				rm -f tmp.txt; \
			fi; \
			if [ -s tmp.feats ]; then \
				$(AWK) -f scripts/label-full.awk tmp.feats > labels/full/$${uttId}.lab; \
				$(AWK) -f scripts/label-mono.awk tmp.feats > labels/mono/$${uttId}.lab; \
				rm -f tmp.feats; \
			fi; \
		done; \
	fi

mlf:
	# Generating monophone and fullcontext Master Label Files (MLF)
	echo "#!MLF!#" > labels/mono.mlf
	echo "\"*/*.lab\" -> \"`pwd -P`/labels/mono\"" >> labels/mono.mlf

	echo "#!MLF!#" > labels/full.mlf
	echo "\"*/*.lab\" -> \"`pwd -P`/labels/full\"" >> labels/full.mlf

list:
	# Generating a fullcontext model list file
	mkdir -p lists

	rm -f tmp
	cat corpus-train.lst | while read uttId; do \
		if [ -s labels/full/$${uttId}.lab -a -s labels/mono/$${uttId}.lab -a -s cmp/$${uttId}.cmp ]; then \
			sed -e "s/.* //g" labels/full/$${uttId}.lab >> tmp; \
		fi \
	done
	sort -u tmp > lists/full.list
	rm -f tmp

	# Generating a fullcontext model list file which includes unseen models
	rm -f tmp
	cat lists/full.list > tmp
	cat corpus-train.lst corpus-test.lst corpus-gen.lst | while read uttId; do \
		sed -e "s/.* //g" labels/full/$${uttId}.lab >> tmp; \
	done
	sort -u tmp > lists/full_all.list
	rm -f tmp

	# Generating a monophone list file
	rm -f tmp
	cat corpus-train.lst | while read uttId; do \
		if [ -s labels/mono/$${uttId}.lab -a -s labels/full/$${uttId}.lab -a -s cmp/$${uttId}.cmp ]; then \
			sed -e "s/.* //g" labels/mono/$${uttId}.lab >> tmp; \
		fi \
	done
	sort -u tmp > lists/mono.list
	rm -f tmp

scp:
	# Generating a training data script
	mkdir -p scp

	rm -f scp/train.scp
	touch scp/train.scp
	cat corpus-train.lst | while read uttId; do \
		if [ -s cmp/$${uttId}.cmp -a -s labels/mono/$${uttId}.lab -a -s labels/full/$${uttId}.lab ]; then \
			echo "`pwd -P`"/cmp/$${uttId}.cmp >> scp/train.scp; \
		fi \
	done

	# Generating a test corpus data script
	rm -f scp/test.scp
	touch scp/test.scp
	cat corpus-test.lst | while read uttId; do \
		if [ -s cmp/$${uttId}.cmp -a -s labels/full/$${uttId}.lab ]; then \
			echo "`pwd -P`"/cmp/$${uttId}.cmp >> scp/test.scp; \
		fi \
	done

	cat scp/train.scp scp/test.scp > scp/train-test.scp

	# Generating a generation label script
	rm -f scp/gen.scp
	touch scp/gen.scp
	cat corpus-gen.lst | while read uttId; do \
		echo "`pwd -P`"/labels/full/$${uttId}.lab >> scp/gen.scp; \
	done


clean: clean-mgc clean-lf0 clean-bap clean-cmp clean-lab clean-mlf clean-list clean-scp

clean-mgc:
	rm -rf mgc

clean-lf0:
	rm -rf lf0

clean-bap:
	rm -rf bap

clean-cmp:
	rm -rf cmp

clean-lab:
	rm -rf labels/mono
	rm -rf labels/full

clean-mlf:
	rm -f labels/*.mlf

clean-list:
	rm -rf lists

clean-scp:
	rm -rf scp

distclean: clean
	rm -f Makefile

.PHONY: all analysis features cmp labels lab mlf list scp clean distclean
